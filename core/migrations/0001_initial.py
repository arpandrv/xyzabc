# Generated by Django 5.2.1 on 2025-05-26 15:34

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlantPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Plant Part',
                'verbose_name_plural': 'Plant Parts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlantType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Plant Type',
                'verbose_name_plural': 'Plant Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('climate_zone', models.CharField(blank=True, max_length=50, null=True)),
                ('state_abbreviation', models.CharField(blank=True, help_text='State/Territory abbreviation (e.g., NT, QLD, WA)', max_length=3, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Grower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(max_length=100)),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='grower_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Pest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('affects_plant_parts', models.ManyToManyField(blank=True, related_name='pests', to='core.plantpart')),
                ('affects_plant_types', models.ManyToManyField(blank=True, related_name='pests', to='core.planttype')),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('affects_plant_parts', models.ManyToManyField(blank=True, related_name='diseases', to='core.plantpart')),
                ('affects_plant_types', models.ManyToManyField(blank=True, related_name='diseases', to='core.planttype')),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('size_hectares', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stocking_rate', models.IntegerField(blank=True, null=True)),
                ('geoscape_address_id', models.CharField(blank=True, db_index=True, max_length=50, null=True, unique=True)),
                ('formatted_address', models.CharField(blank=True, max_length=500, null=True)),
                ('boundary', models.JSONField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farms', to='core.grower')),
                ('plant_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='farms', to='core.planttype')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='farms', to='core.region')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SeasonalStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('months', models.CharField(max_length=50)),
                ('prevalence_p', models.DecimalField(decimal_places=3, max_digits=4)),
                ('active_diseases', models.ManyToManyField(blank=True, related_name='seasonal_stages', to='core.disease')),
                ('active_pests', models.ManyToManyField(blank=True, related_name='seasonal_stages', to='core.pest')),
            ],
            options={
                'verbose_name': 'Seasonal Stage Mapping',
                'verbose_name_plural': 'Seasonal Stage Mappings',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SurveillanceCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('season', models.CharField(choices=[('Wet', 'Wet Season'), ('Dry', 'Dry Season'), ('Flowering', 'Flowering Period')], db_index=True, max_length=20)),
                ('confidence_level', models.IntegerField(choices=[(90, '90%'), (95, '95%'), (99, '99%')])),
                ('population_size', models.IntegerField()),
                ('prevalence_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('margin_of_error', models.DecimalField(decimal_places=2, default=5.0, max_digits=5)),
                ('required_plants', models.IntegerField()),
                ('percentage_of_total', models.DecimalField(decimal_places=2, max_digits=5)),
                ('survey_frequency', models.IntegerField(blank=True, null=True)),
                ('is_current', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculations', to=settings.AUTH_USER_MODEL)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculations', to='core.farm')),
            ],
            options={
                'verbose_name': 'Surveillance Calculation',
                'verbose_name_plural': 'Surveillance Calculations',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='SurveySession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], db_index=True, default='in_progress', max_length=20)),
                ('target_plants_surveyed', models.PositiveIntegerField(blank=True, null=True)),
                ('session_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_sessions', to='core.farm')),
                ('surveyor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Survey Session',
                'verbose_name_plural': 'Survey Sessions',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, null=True)),
                ('plant_sequence_number', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('status', models.CharField(choices=[('completed', 'Completed')], db_index=True, default='completed', max_length=10)),
                ('diseases_observed', models.ManyToManyField(blank=True, related_name='observations', to='core.disease')),
                ('pests_observed', models.ManyToManyField(blank=True, related_name='observations', to='core.pest')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='core.surveysession')),
            ],
            options={
                'verbose_name': 'Observation Point',
                'verbose_name_plural': 'Observation Points',
                'ordering': ['observation_time'],
            },
        ),
        migrations.AddIndex(
            model_name='farm',
            index=models.Index(fields=['name'], name='core_farm_name_30a09f_idx'),
        ),
        migrations.AddIndex(
            model_name='farm',
            index=models.Index(fields=['owner'], name='core_farm_owner_i_8007c0_idx'),
        ),
        migrations.AddIndex(
            model_name='farm',
            index=models.Index(fields=['plant_type'], name='core_farm_plant_t_306009_idx'),
        ),
        migrations.AddIndex(
            model_name='farm',
            index=models.Index(fields=['region'], name='core_farm_region__6be8dc_idx'),
        ),
        migrations.AddIndex(
            model_name='farm',
            index=models.Index(fields=['geoscape_address_id'], name='core_farm_geoscap_38c43f_idx'),
        ),
        migrations.AddIndex(
            model_name='surveillancecalculation',
            index=models.Index(fields=['farm', '-date_created'], name='core_survei_farm_id_ca73a3_idx'),
        ),
        migrations.AddIndex(
            model_name='surveillancecalculation',
            index=models.Index(fields=['farm', 'is_current'], name='core_survei_farm_id_c5557f_idx'),
        ),
        migrations.AddIndex(
            model_name='surveysession',
            index=models.Index(fields=['status'], name='core_survey_status_15820b_idx'),
        ),
        migrations.AddIndex(
            model_name='surveysession',
            index=models.Index(fields=['farm', 'status'], name='core_survey_farm_id_5ec94a_idx'),
        ),
        migrations.AddIndex(
            model_name='surveysession',
            index=models.Index(fields=['surveyor', '-start_time'], name='core_survey_surveyo_f2681f_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['status'], name='core_observ_status_78fede_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['session', 'status'], name='core_observ_session_f87950_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['observation_time'], name='core_observ_observa_4a8918_idx'),
        ),
        migrations.AddIndex(
            model_name='observation',
            index=models.Index(fields=['plant_sequence_number'], name='core_observ_plant_s_4f955e_idx'),
        ),
    ]
